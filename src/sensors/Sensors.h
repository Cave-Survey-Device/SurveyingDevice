
#ifndef HEADER_BEAN_BOI_SENSORS
#define HEADER_BEAN_BOI_SENSORS


#include <ArduinoEigenDense.h>

using namespace Eigen;

#define SAMPLES_PER_ORIENTATION 25
#define ORIENTATIONS 12
#define N_CALIB ORIENTATIONS*SAMPLES_PER_ORIENTATION
#define N_ALIGNMENT 8
#define SAMPLES_PER_READING 5
#define CALIBRATION_STDEV_MIN 0.01
#define N_CALIB_STDEV 5


class InertialSensor
{
private:
    Matrix<float,3,N_CALIB> calibration_data;
    int calib_num;
    
protected:
    Matrix3f calibration_matrix;
    Vector3f calibration_offset;
    Vector3f calibrated_data;
    Vector3f raw_data;

public:
    // Adds a sample of raw_data to the pool of calibration data, returns 0 for uncalibrated, returns 1 for calibrated
    bool ColectCalibrationSample();
    // Calibrates the sensor
    void CalibrateLinear();  
    // Returns the raw data generated by the sensor
    virtual Vector3f GetRawData() = 0;
    // Returns thre value of the sensor after calibration but before alignment
    Vector3f GetReading();
    // Reset calibration data
    void ResetCalibration();
};

class LaserSensor
{
public:
    // Initialise lidar module
    virtual void init()=0;

    // Get lidar mesaurement
    virtual float GetMeasurement()=0;

    // Toggle laser
    virtual void ToggleLaser()=0;

    virtual void EnableLaser()=0;
     
    virtual void DisableLaser()=0;
};

class SensorHandler
{
protected:
    Matrix3f alignment_matrix; // Alignment matrix to apply to magnetometer
    InertialSensor* accelerometer; // Connection to accelerometer sensor
    InertialSensor* magnetometer; // Connection to magnetometer sensor
    LaserSensor* laser; // Connection to LIDAR sensor
    Matrix<float,3,N_ALIGNMENT> alignment_data; // Alignment data, heading, inclination, roll, distance
    float inclination_alignment; // Value to be ADDED to value of sensors to align laser and inertial sensors
    float heading_alignment; // Value to be ADDED to value of sensors to align laser and inertial sensors
    float alignment_progress;

public:
    SensorHandler(InertialSensor* acc, InertialSensor* mag, LaserSensor* las);
    SensorHandler(InertialSensor* acc, InertialSensor* mag);
    SensorHandler();

    // Takes a measurement using all 3 sensors. Value returned is Vector3d(Heading, Inclination, Distace)
    Vector3f get_measurement();

    // Calibrate the inertial sensors - accelerometer and magnetometer
    void CalibrateInertial();

    // llign the inrtial sensors
    void AlignInertial();

    // Align inertial sensor with laser rangefinder
    void AlignLaser();   

    // Collects alignemnt data ready for alignment process
    bool CollectAlignmentData();   

    // Collect 1 sample of data for inertial sensors as part of the calibration procedure
    bool CollectCalibrationData(); 
    

    void ResetCalibration();

    void LoadCalibration();

    void ResetAlignment();

    void LoadAlignment();

    void EnableLaser();

    void DisableLaser();


    Vector3f GetReading();
};

#endif